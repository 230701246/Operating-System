BEST FIT:
#include <stdio.h>

#define MAX 100

int main() {
    int m, n, i, j;
    printf("Enter number of memory blocks: ");
    scanf("%d", &m);
    int blockSize[MAX];
    printf("Enter sizes of %d memory blocks:\n", m);
    for (i = 0; i < m; i++) {
        scanf("%d", &blockSize[i]);
    }
    printf("Enter number of processes: ");
    scanf("%d", &n);
    int processSize[MAX];
    printf("Enter sizes of %d processes:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &processSize[i]);
    }

    int allocation[MAX];
    for (i = 0; i < n; i++) {
        allocation[i] = -1;
    }
    for (i = 0; i < n; i++) {
        int bestIdx = -1;
        for (j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) {
                    bestIdx = j;
                }
            }
        }

        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf(" %d\t\t%d\t\t", i + 1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1); // 1-based indexing
        else
            printf("Not Allocated\n");
    }

    return 0;
}
____________________________________________________________________________________________________________________________________________________________________________________________


FIRST FIT:

#include <stdio.h>
#define MAX 25

int main() {
    int frag[MAX], b[MAX], f[MAX], ff[MAX];
    int i, j, nb, nf;
    static int bf[MAX];

    printf("Enter the number of blocks: ");
    scanf("%d", &nb);

    printf("Enter the number of files: ");
    scanf("%d", &nf);

    for (i = 0; i < nb; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &b[i]);
    }

    for (i = 0; i < nf; i++) {
        bf[i] = 0;
        printf("File %d: ", i + 1);
        scanf("%d", &f[i]);
    }

    for (i = 0; i < nf; i++) {
        for (j = 0; j < nb; j++) {
            if (bf[j] == 0 && b[j] >= f[i]) {
                ff[i] = j;
                frag[i] = b[j] - f[i];
                bf[j] = 1;
                break;
            }
        }
    }

    printf("\nFile_no\tFile_size\tBlock_no\tBlock_size\tFragment");
    for (i = 0; i < nf; i++) {
        printf("\n%d\t%d\t\t", i + 1, f[i]);
        if (ff[i] != 0 || (ff[i] == 0 && b[0] >= f[i])) {
            printf("%d\t\t%d\t\t%d", ff[i] + 1, b[ff[i]], frag[i]);
        } else {
            printf("Not Allocated\t-\t\t-");
        }
    }

    return 0;
}
