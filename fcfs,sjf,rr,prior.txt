FCFS:
#include <stdio.h> 
int main() { 
    int n, i; 
    int burst_time[10], waiting_time[10], turnaround_time[10]; 
    int total_waiting_time = 0, total_turnaround_time = 0; 
    printf("Enter the number of processes: "); 
    scanf("%d", &n); 
    printf("Enter the burst time of the processes:\n"); 
    for (i = 0; i < n; i++) { 
        printf("Process %d: ", i); 
        scanf("%d", &burst_time[i]); 
    } 
    waiting_time[0] = 0; 
    for (i = 1; i < n; i++) { 
        waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1]; 
    } 
    for (i = 0; i < n; i++) { 
        turnaround_time[i] = burst_time[i] + waiting_time[i]; 
    } 
    printf("\nProcess\tBurst Time\tWaiting Time\tTurn Around Time\n"); 
    for (i = 0; i < n; i++) { 
        printf("%d\t%d\t\t%d\t\t%d\n", i, burst_time[i], waiting_time[i], turnaround_time[i]); 
    } 
    for (i = 0; i < n; i++) { 
        total_waiting_time += waiting_time[i]; 
        total_turnaround_time += turnaround_time[i]; 
    } 
    printf("\nAverage waiting time is: %.2f", (float)total_waiting_time / n); 
    printf("\nAverage Turnaround Time is: %.2f\n", (float)total_turnaround_time / n); 
 
    return 0; 
}
___________________________________________________________________________________________________________________________________________________________________________________________

SJF:
#include <stdio.h> 
struct Process { 
    int id; 
    int burst_time; 
    int waiting_time; 
    int turnaround_time; 
}; 
void sortProcesses(struct Process p[], int n) { 
    struct Process temp; 
    for (int i = 0; i < n - 1; i++) { 
        for (int j = i + 1; j < n; j++) { 
            if (p[i].burst_time > p[j].burst_time) { 
                temp = p[i]; 
                p[i] = p[j]; 
                p[j] = temp; 
            } 
        } 
    } 
} 
int main() { 
    int n; 
    struct Process p[10]; 
    int total_waiting_time = 0, total_turnaround_time = 0; 
    printf("Enter the number of processes: "); 
    scanf("%d", &n); 
    printf("Enter the burst time of the processes:\n"); 
    for (int i = 0; i < n; i++) { 
        printf("Process %d: ", i + 1); 
        scanf("%d", &p[i].burst_time); 
        p[i].id = i + 1; 
        p[i].waiting_time = 0; 
        p[i].turnaround_time = 0; 
    } 
    sortProcesses(p, n); 
  for (int i = 0; i < n; i++) { 
        if (i == 0) { 
            p[i].waiting_time = 0; 
        } else { 
            p[i].waiting_time = p[i - 1].waiting_time + p[i - 1].burst_time; 
        } 
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time; 
        total_waiting_time += p[i].waiting_time; 
        total_turnaround_time += p[i].turnaround_time; 
    } 
    printf("\nProcess\tBurst Time\tWaiting Time\tTurn Around Time\n"); 
    for (int i = 1; i < n; i++) { 
        printf("%d\t%d\t\t%d\t\t%d\n", p[i].id, p[i].burst_time, p[i].waiting_time, 
p[i].turnaround_time); 
    } 
    printf("\nAverage waiting time is: %.2f", (float)total_waiting_time / n); 
*printf("\nAverage Turn Around Time is: %.2f\n", (float)total_turnaround_time / n); 
return 0; 
}
____________________________________________________________________________________________________________________________________________________________________________________________

PRIORITY:
#include <stdio.h> 
struct Process { 
    int id; 
    int burst_time; 
    int priority; 
    int waiting_time; 
    int turnaround_time; 
}; 
void sortProcesses(struct Process p[], int n) { 
    struct Process temp; 
    for (int i = 0; i < n - 1; i++) { 
        for (int j = i + 1; j < n; j++) { 
            if (p[i].priority > p[j].priority) { 
                temp = p[i]; 
                p[i] = p[j]; 
                p[j] = temp; 
            } 
        } 
    } 
} 
int main() { 
    int n; 
    struct Process p[10]; 
    int total_waiting_time = 0, total_turnaround_time = 0; 
    printf("Enter the number of processes: "); 
    scanf("%d", &n); 
    printf("Enter the burst time and priority of the processes:\n"); 
    for (int i = 0; i < n; i++) { 
        printf("Process %d - Burst Time: ", i + 1); 
        scanf("%d", &p[i].burst_time); 
        printf("Process %d - Priority: ", i + 1); 
        scanf("%d", &p[i].priority); 
        p[i].id = i + 1; 
        p[i].waiting_time = 0; 
        p[i].turnaround_time = 0; 
} 
    sortProcesses(p, n); 
    for (int i = 0; i < n; i++) { 
        if (i == 0) { 
            p[i].waiting_time = 0; 
        } else { 
            p[i].waiting_time = p[i - 1].waiting_time + p[i - 1].burst_time; 
        } 
        p[i].turnaround_time = p[i].waiting_time + p[i].burst_time; 
 
        total_waiting_time += p[i].waiting_time; 
total_turnaround_time += p[i].turnaround_time; 
} 
printf("\nProcess\tBurst Time\tPriority\tWaiting Time\tTurn Around Time\n"); 
for (int i = 0; i < n; i++) { 
printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", p[i].id, p[i].burst_time, p[i].priority, 
p[i].waiting_time, p[i].turnaround_time); 
} 
printf("\nAverage waiting time is: %.2f", (float)total_waiting_time / n); 
printf("\nAverage Turn Around Time is: %.2f\n", (float)total_turnaround_time / n); 
return 0; 
} 
____________________________________________________________________________________________________________________________________________________________________________________________

RR:
#include <stdio.h>

struct Process {
    int id;
    int burst_time;
    int remaining_burst_time;
    int waiting_time;
    int turnaround_time;
};

int main() {
    int n, quantum, t = 0;
    struct Process p[10];
    int total_waiting_time = 0, total_turnaround_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the time quantum: ");
    scanf("%d", &quantum);

    printf("Enter the burst time of the processes:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d - Burst Time: ", i + 1);
        scanf("%d", &p[i].burst_time);
        p[i].remaining_burst_time = p[i].burst_time;
        p[i].waiting_time = 0;
        p[i].turnaround_time = 0;
        p[i].id = i + 1;
    }

    while (1) {
        int done = 1;

        for (int i = 0; i < n; i++) {
            if (p[i].remaining_burst_time > 0) {
                done = 0;

                if (p[i].remaining_burst_time > quantum) {
                    t += quantum;
                    p[i].remaining_burst_time -= quantum;
                } else {
                    t += p[i].remaining_burst_time;
                    p[i].waiting_time = t - p[i].burst_time;
                    p[i].turnaround_time = t;
                    p[i].remaining_burst_time = 0;
                }
            }
        }

        if (done)
            break;
    }

    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        total_waiting_time += p[i].waiting_time;
        total_turnaround_time += p[i].turnaround_time;
        printf("%d\t%d\t\t%d\t\t%d\n", p[i].id, p[i].burst_time, p[i].waiting_time, p[i].turnaround_time);
    }

    printf("\nAverage Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);

    return 0;
}

