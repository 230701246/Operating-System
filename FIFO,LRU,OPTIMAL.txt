FIFO:
#include <stdio.h>

#define MAX 100

int main() {
    int ref_str[MAX], frames[MAX];
    int n, frame_size, i, j, k;
    int page_faults = 0, front = 0, rear = 0, count = 0, found;

    printf("Enter the size of reference string: ");
    scanf("%d", &n);

    for (i = 0; i < n; i++) {
        printf("Enter [%d]: ", i + 1);
        scanf("%d", &ref_str[i]);
    }

    printf("Enter page frame size: ");
    scanf("%d", &frame_size);

    printf("\n");

    for (i = 0; i < n; i++) {
        found = 0;

        // Check if the page is already in frame
        for (j = 0; j < count; j++) {
            if (frames[j] == ref_str[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            // Page fault
            page_faults++;

            if (count < frame_size) {
                frames[rear++] = ref_str[i];
                count++;
            } else {
                // FIFO replacement
                for (k = 1; k < frame_size; k++) {
                    frames[k - 1] = frames[k];
                }
                frames[frame_size - 1] = ref_str[i];
            }

            // Display frame status
            printf("%d -> ", ref_str[i]);
            for (j = 0; j < count; j++) {
                printf("%d ", frames[j]);
            }

            for (j = count; j < frame_size; j++) {
                printf("- ");
            }
            printf("\n");
        } else {
            printf("%d -> No Page Fault\n", ref_str[i]);
        }
    }

    printf("\nTotal page faults: %d\n", page_faults);
    return 0;
}
____________________________________________________________________________________________________________________________________________________________________________________________


LRU:

#include <stdio.h> 
int findLRU(int time[], int n) { 
    int i, minimum = time[0], pos = 0; 
    for (i = 1; i < n; ++i) { 
        if (time[i] < minimum) { 
            minimum = time[i]; 
            pos = i; 
        } 
    } 
    return pos; 
} 
int main() { 
    int no_of_frames, no_of_pages, frames[10], pages[30]; 
    int counter = 0, time[10], flag1, flag2, i, j, pos, faults = 0; 
    printf("Enter number of frames: "); 
    scanf("%d", &no_of_frames); 
    printf("Enter number of pages: "); 
    scanf("%d", &no_of_pages); 
    printf("Enter reference string: "); 
    for (i = 0; i < no_of_pages; ++i) { 
        scanf("%d", &pages[i]); 
    } 
    for (i = 0; i < no_of_frames; ++i) { 
        frames[i] = -1; 
    } 
    for (i = 0; i < no_of_pages; ++i) { 
        flag1 = flag2 = 0; 
        for (j = 0; j < no_of_frames; ++j) { 
            if (frames[j] == pages[i]) { 
                counter++; 
                time[j] = counter; 
                flag1 = flag2 = 1; 
                break; 
            } 
        } 
        if (flag1 == 0) { 
            for (j = 0; j < no_of_frames; ++j) { 
                if (frames[j] == -1) { 
                    counter++; 
                    faults++; 
                    frames[j] = pages[i]; 
                    time[j] = counter; 
                    flag2 = 1; 
                    break; 
                } 
            } 
        } 
        if (flag2 == 0) { 
            pos = findLRU(time, no_of_frames); 
            counter++; 
            faults++; 
            frames[pos] = pages[i]; 
            time[pos] = counter; 
        } 
        for (j = 0; j < no_of_frames; ++j) { 
            if (frames[j] != -1) 
                printf("%d ", frames[j]); 
            else 
                printf("-1 "); 
        } 
        printf("\n"); 
    } 
    printf("Total Page Faults = %d\n", faults); 
    return 0; 
}

Sample Output : 
Enter number of frames: 3  
Enter number of pages: 6  
Enter reference string: 5 7 5 6 7 3  
5 -1 -1  
5 7 -1  
5 7 -1  
5 7 6  
5 7 6  
3 7 6  
Total Page Faults = 4
____________________________________________________________________________________________________________________________________________________________________________________________

OPTIMAL:

#include <stdio.h> 
int findOptimal(int pages[], int frames[], int n, int index, int frameSize) { 
    int farthest = index; 
    int pos = -1; 
    for (int i = 0; i < frameSize; i++) { 
        int j; 
        for (j = index; j < n; j++) { 
            if (frames[i] == pages[j]) { 
                if (j > farthest) { 
                    farthest = j; 
                    pos = i; 
                } 
                break; 
            } 
        } 
        if (j == n) 
            return i; 
    } 
    if (pos == -1) 
        return 0; 
    else 
        return pos; 
} 
int main() { 
    int frames[10], pages[30], n, frameSize, i, j, k, pageFaults = 0, found; 
    printf("Enter number of frames: "); 
    scanf("%d", &frameSize); 
    printf("Enter number of pages: "); 
    scanf("%d", &n); 
    printf("Enter reference string: "); 
    for (i = 0; i < n; i++) 
        scanf("%d", &pages[i]); 
    for (i = 0; i < frameSize; i++) 
        frames[i] = -1; 
    for (i = 0; i < n; i++) { 
        found = 0; 
        for (j = 0; j < frameSize; j++) { 
            if (frames[j] == pages[i]) { 
                found = 1; 
                break; 
            } 
        } 
        if (!found) { 
            int replaceIndex = -1; 
            for (j = 0; j < frameSize; j++) { 
                if (frames[j] == -1) { 
                    replaceIndex = j; 
                    break; 
                } 
            } 
            if (replaceIndex == -1) { 
                replaceIndex = findOptimal(pages, frames, n, i + 1, frameSize); 
            } 
            frames[replaceIndex] = pages[i]; 
            pageFaults++; 
        } 
        for (k = 0; k < frameSize; k++) { 
            if (frames[k] != -1) 
                printf("%d ", frames[k]); 
            else 
                printf("-1 "); 
        } 
        printf("\n"); 
    } 
    printf("Total Page Faults = %d\n", pageFaults); 
    return 0; 
}

